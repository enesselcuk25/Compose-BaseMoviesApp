plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'com.google.gms.google-services'
    id "com.google.protobuf" version "0.9.1"
}

android {
    namespace 'com.enesselcuk.moviesui'
    compileSdk 35

    defaultConfig {
        applicationId "com.enesselcuk.moviesui"
        minSdk 21
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())


        buildConfigField "String" ,"BEAR_TOKEN", "\"${properties.getProperty("BEAR_TOKEN")}\""
        buildConfigField "String", "ACCOUNT_ID", "\"${properties.getProperty("ACCOUNT_ID")}\""
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

}

dependencies {

    // Core
    implementation(DependenciesWithVersions.CORE_KTX)
    implementation(DependenciesWithVersions.ACTIVITY_COMPOSE)
    implementation(DependenciesWithVersions.ACTIVITY_KTX)
    implementation(DependenciesWithVersions.APPCOMPAT)
    implementation(DependenciesWithVersions.MATERIAL)

    // Jetpack Compose
    implementation(DependenciesWithVersions.COMPOSE_UI)
    implementation(DependenciesWithVersions.COMPOSE_TOOLING_PREVIEW)
    implementation(DependenciesWithVersions.COMPOSE_UTIL)
    implementation(DependenciesWithVersions.COMPOSE_RUNTIME_LIVEDATA)
    implementation(DependenciesWithVersions.COMPOSE_MATERIAL3)
    implementation(DependenciesWithVersions.COMPOSE_MATERIAL3_WINDOW)

    // ConstraintLayout
    implementation(DependenciesWithVersions.CONSTRAINT_LAYOUT)

    // ViewModel
    implementation(DependenciesWithVersions.VIEWMODEL_COMPOSE)
    implementation(DependenciesWithVersions.LIFECYCLE_RUNTIME_COMPOSE)

    // Navigation
    implementation(DependenciesWithVersions.NAVIGATION_COMPOSE)

    // Accompanist
    implementation(DependenciesWithVersions.ACCOMPANIST_INSETS)
    implementation(DependenciesWithVersions.ACCOMPANIST_NAV_ANIMATION)
    implementation(DependenciesWithVersions.ACCOMPANIST_PAGER)

    // Coroutines
    implementation(DependenciesWithVersions.COROUTINES_ANDROID)
    implementation(DependenciesWithVersions.COROUTINES_CORE)

    // Room
    implementation(DependenciesWithVersions.ROOM_RUNTIME)
    implementation(DependenciesWithVersions.ROOM_PAGING)
    implementation(DependenciesWithVersions.ROOM_KTX)
    kapt(DependenciesWithVersions.ROOM_COMPILER)

    // Hilt
    implementation(DependenciesWithVersions.HILT_ANDROID)
    kapt(DependenciesWithVersions.HILT_COMPILER)
    implementation(DependenciesWithVersions.HILT_NAVIGATION_COMPOSE)

    // Retrofit & Moshi
    implementation(DependenciesWithVersions.RETROFIT)
    implementation(DependenciesWithVersions.RETROFIT_GSON)
    implementation(DependenciesWithVersions.RETROFIT_MOCK)
    implementation(DependenciesWithVersions.RETROFIT_MOSHI)
    implementation(DependenciesWithVersions.MOSHI_KOTLIN)

    // OkHttp
    implementation(DependenciesWithVersions.OKHTTP)
    implementation(DependenciesWithVersions.OKHTTP_LOGGING)
    implementation(DependenciesWithVersions.OKHTTP_MOCK_WEB_SERVER)

    // Coil
    implementation(DependenciesWithVersions.COIL)

    // Paging
    implementation(DependenciesWithVersions.PAGING_COMPOSE)
    implementation(DependenciesWithVersions.PAGING_RUNTIME)

    // DataStore
    implementation(DependenciesWithVersions.DATASTORE)
    implementation(DependenciesWithVersions.DATASTORE_CORE)
    implementation(DependenciesWithVersions.DATASTORE_PREFERENCES)

    // Protobuf
    implementation(DependenciesWithVersions.PROTOBUF)

    // Lottie
    implementation(DependenciesWithVersions.LOTTIE)

    // Media Playback (ExoPlayer)
    implementation(DependenciesWithVersions.MEDIA3_EXOPLAYER)
    implementation(DependenciesWithVersions.MEDIA3_UI)

    // Chucker
    implementation(DependenciesWithVersions.CHUCKER)

    // WorkManager
    implementation(DependenciesWithVersions.WORK_RUNTIME)

    // Testing
    testImplementation(DependenciesWithVersions.JUNIT)
    androidTestImplementation(DependenciesWithVersions.ANDROID_JUNIT)
    androidTestImplementation(DependenciesWithVersions.ESPRESSO)
    androidTestImplementation(DependenciesWithVersions.MOCKITO_ANDROID)
    androidTestImplementation(DependenciesWithVersions.ARCH_CORE_TESTING)
    androidTestImplementation(DependenciesWithVersions.TURBINE)
    testImplementation(DependenciesWithVersions.MOCKITO_CORE)
    testImplementation(DependenciesWithVersions.MOCKITO_INLINE)
    testImplementation(DependenciesWithVersions.MOCKK)
    testImplementation(DependenciesWithVersions.HAMCREST)
    testImplementation(DependenciesWithVersions.COROUTINE_TEST)

}
kapt {
    correctErrorTypes true
}

import org.apache.tools.ant.taskdefs.condition.Os
def archSuffix = Os.isFamily(Os.FAMILY_MAC) ? ':osx-x86_64' : ''
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.20.1$archSuffix"
    }
    plugins {
        javalite {
            artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0$archSuffix"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}